# -*- coding: utf-8 -*-
"""Neural Networks - Pretrained Image Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bx43N3HtHDCN-lNjhKlLjqG9cCwl6NEI

# Imports
"""

import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow.compat.v1 as tf
import keras

from keras.preprocessing.image import img_to_array, load_img
from keras.applications.inception_resnet_v2 import InceptionResNetV2, decode_predictions, preprocess_input
from IPython.core.display import display
from keras.applications.vgg19 import VGG19
from keras.applications.vgg19 import preprocess_input as preprocess_input_vgg19
from keras.applications.vgg19 import decode_predictions as decode_vgg19

from keras.applications.xception import Xception
from keras.applications.xception import preprocess_input as preprocess_input_xception
from keras.applications.xception import decode_predictions as decode_xception

"""# Constants

"""

file_1 = '01 Umbrella.jpg'
file_2 = '02 Couple.jpg'
file_3 = '03 Ocean.jpg'

"""# Preprocessing Images"""

pic = load_img(file_1, target_size=(299,299))
display(pic)

pic_array = img_to_array(pic)
pic_array.shape

#Add another dimension for the array as required by the learning algorithm
expanded = np.expand_dims(pic_array, axis=0)
expanded.shape

preprocessed = preprocess_input(preprocessed)

def format_img_inceptionresnet(filename):
  pic = load_img(filename, target_size=(299,299))
  pic_arr = img_to_array(pic)
  expanded = np.expand_dims(pic_arr, axis=0)
  return preprocess_input(expanded)

inception_model = InceptionResNetV2(weights='imagenet')

inception_model.graph = tf.get_default_graph()

#Predict the pictures
prediction = inception_model.predict(expanded)
decode_predictions(prediction)

data = format_img_inceptionresnet(file_1)
prediction - inception_model.predict(data)
display(load_img(file_1))
decode_predictions(prediction)

"""# Using VGG 19"""

def format_img_vgg19(filename):
  pic = load_img(filename, target_size=(224,224))
  pic_arr = img_to_array(pic)
  expanded = np.expand_dims(pic_arr, axis=0)
  return preprocess_input_vgg19(expanded)

vgg19_model = VGG19()

data = format_img_vgg19(file_3)
pred = vgg19_model.predict(data)
display(load_img(file_3))
decode_vgg19(pred)

